name: Build & Test

on:
  workflow_dispatch:
    inputs:
      scope:
        type: choice
        description: 'Scope the workflow should run with. Allowed values are: all, build-only, test-only'
        default: 'all'
        options:
          - all
          - build-only
  workflow_call:
    inputs:
      scope:
        type: string
        description: 'Scope the workflow should run with. Allowed values are: all, build-only'
        default: 'all'

jobs:
  static-and-unit-tests:
    name: Static & Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install dependencies
        run: python3 -m pip install tox
      - name: Run linters
        run: tox -e lint
      - name: Run tests
        run: tox -e unit

  collect-bases:
    name: Collect bases for charm
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: Assign charm artifacts to runners
      id: charm-to-runner
      run: |
        # Reverse lookup for artifact base index to its architecture
        ./scripts/get-runners.py
    outputs:
      bases: ${{ steps.charm-to-runner.outputs.bases }}

  build:
    name: 'Build ${{ matrix.arch.name }}-${{ matrix.arch.arch }}'
    strategy:
      fail-fast: false
      matrix:
        arch: ${{ fromJSON(needs.collect-bases.outputs.bases) }}
    needs:
      - collect-bases
      - static-and-unit-tests
    env:
      PIP_CACHE_DIR: /tmp/cache/pip
    runs-on: ["self-hosted", "linux", "${{ matrix.arch.arch == 'amd64' && 'X64' || 'ARM64' }}", "jammy", "large"]
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install charmcraft
        run: sudo snap install --classic --channel=latest/stable charmcraft
      - name: Cache Deps
        id: cache-charm-deps
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}/**
          key: charm-deps-${{ matrix.arch.arch }}-${{ hashFiles('**/requirements.txt') }}
      - name: Build charm
        id: build_charm
        run: |
            # Make the restored cache dir accessible by root as we run
            # charmcraft using sudo in order to use destructive-mode
            if [ -d ${PIP_CACHE_DIR} ]; then
              sudo chown root ${PIP_CACHE_DIR}
            fi
            sudo pip config set global.cache-dir ${PIP_CACHE_DIR}
            sudo charmcraft pack --destructive-mode --verbose
            # Make the created cache dir accessible by user to enable it to be
            # cached later on
            sudo chown -R $(whoami) ${PIP_CACHE_DIR}
      - name: Upload charmcraft logs
        if: failure()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: logs-charmcraft-build-base-${{ matrix.arch.name }}-${{ matrix.arch.base }}
          path: ~/.local/state/charmcraft/log/
          if-no-files-found: error
      - name: Upload charm package
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: ${{ matrix.arch.name }}-charm-${{ matrix.arch.arch }}
          # .empty file required to preserve directory structure
          # See https://github.com/actions/upload-artifact/issues/344#issuecomment-1379232156
          path: |
            ./*.charm
          if-no-files-found: error

  integration-test:
    name: Integration tests
    if: inputs.scope != 'build-only'
    needs:
      - static-and-unit-tests
      - collect-bases
      - build
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        juju-version:
          - "3.5"  # renovate: latest juju 3
          - "2.9"  # renovate: latest juju 2
        arch: ${{ fromJSON(needs.collect-bases.outputs.bases) }}
    runs-on: ["self-hosted", "linux", "${{ matrix.arch.arch == 'amd64' && 'X64' || 'ARM64' }}", "jammy", "large"]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Download packed charm(s)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        id: downloaded-charm
        with:
          name: ${{ matrix.arch.name }}-charm-${{ matrix.arch.arch }}
      - name: Set channel
        run: |
          juju_channel=$(echo "${{ matrix.juju-version }}" | cut -c 1-3)
          echo "JUJU_CHANNEL=${juju_channel}/stable" >> "$GITHUB_ENV"
          echo "JUJU_VERSION=${{ matrix.juju-version }}" >> "$GITHUB_ENV"
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: lxd
          juju-channel: "${{ env.JUJU_CHANNEL }}"
      - name: Run integration tests
        run: |
          if [ "${{ matrix.arch.arch }}" == "arm64" ]; then
            args+="--constraints arch=arm64"
          fi
          ls *.charm | xargs -I {} ./scripts/run-integration-tests --charm=./{} ${args}

