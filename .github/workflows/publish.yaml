name: Publish Charms

on:
  push:
    branches:
      - main

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build-charms:
    name: Build & Unit Test
    uses: ./.github/workflows/build-and-test.yaml
    secrets: inherit
    with:
      scope: build-only

  publish-to-edge:
    name: Release to edge
    runs-on: [self-hosted, linux, X64, jammy, large]
    needs: [build-charms]
    outputs:
      test_channel: ${{ steps.channel.outputs.test_channel }}
      branch: ${{ steps.channel.outputs.branch }}
    steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: |
        sudo apt install  -y zip python3-ruamel.yaml
        sudo snap install --classic --channel=latest/stable charmcraft
        sudo snap install --channel=3/stable juju
    - name: Select charmhub channel
      id: channel
      run: |
        branch=gh${{ github.run_id }}
        channel="$(cat .track)"/edge
        echo "channel=$channel" >> "$GITHUB_OUTPUT"
        echo "test_channel=$channel/$branch" >> "$GITHUB_OUTPUT"
    - name: Fetch charm artifacts
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        pattern: 'nats-operator-charm-a[mr][dm]64'
        path: "${{ github.workspace }}/charms"
        merge-multiple: true
    - name: Upload charms to charmhub
      id: upload-charms
      env:
        CHARMCRAFT_AUTH: ${{ secrets.CHARMHUB_TOKEN }}
      run: |
        cd charms/
        charm_channel="${{ steps.channel.outputs.channel }}"
        test_channel="${{ steps.channel.outputs.test_channel }}"
        for charm_file in *.charm; do
          charm_file_name="$(basename ${charm_file} .charm)"
          charm=(${charm_file_name//_/ })
          extra_args=

          resources="core nats"
          [ ! -e zero-size-resource ] && touch zero-size-resource
          for r in $resources ; do
              output=$(charmcraft upload-resource "${charm[0]}" "$r" --format=json --filepath zero-size-resource)
              rev=$(echo "$output" | jq .revision)
              extra_args="$extra_args --resource $r:$rev"
              echo "Published dummy resource ${r} with revision ${rev} for ${charm[0]} to channel $charm_channel"
          done

          echo "Publishing ${charm[0]} to channel $charm_channel"
          # Build the final charm: we add a build_time file to ensure we produce a
          # charm with a different checksum so we can upload the same tarball
          # multiple times
          date -u +"%Y-%m-%dT%H:%M:%SZ" > build_time
          zip -u "./${charm_file}" build_time

          set +e
          output="$(charmcraft upload \
            --release "$charm_channel" \
            --release "$test_channel" \
            --name "${charm[0]}" $extra_args "${charm_file}" 2>&1)"
          if [ $? -ne 0 ] ; then
              if ! echo "$output" | grep -q "An upload with that digest" ; then
                  echo "ERROR: Failed to publish $charm: $output"
                  exit 1
              fi
          fi
          base=(${charm[1]//-/ })
          version="${base[0]#*@}"
          set -e
          case "$version" in
            22.04)
              series="jammy"
              ;;
            24.04)
              series="noble"
              ;;
            *)
              echo "ERROR: Unsupported Ubuntu series: ${version}"
              exit 1
              ;;
          esac

          rev="$(charmcraft status "${charm[0]}" --format=json | jq ".[].mappings[] | select(.base.channel == \"${version}\" and .base.architecture == \"${base[1]}\") | .releases[] | select(.channel == \"$charm_channel\") | .revision")"
          echo "Published charm: ${charm[0]}, series: ${series}, architecture: ${base[1]}, revision: $rev"
        done

  run-integration-test:
    name: Integration Test
    needs: [publish-to-edge]
    uses: ./.github/workflows/build-and-test.yaml
    secrets: inherit
    with:
      scope: integration-test-only
      channel: ${{ needs.publish-to-edge.outputs.test_channel }}

  promote-to-beta:
    uses: ./.github/workflows/promote-charms.yaml
    needs: [run-integration-test]
    with:
      from-risk: edge/${{ needs.publish-to-edge.outputs.branch }}
      to-risk: beta
    secrets:
      CHARMHUB_TOKEN: ${{ secrets.CHARMHUB_TOKEN }}
